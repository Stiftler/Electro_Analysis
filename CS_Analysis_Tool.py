# CS Analysis Tool by Pascal Reiß
# Version 1.0.1

# basic imports
import os
import tkinter as tk
from datetime import datetime

# imports of own programs
import levich as la
import tafel as ta
import electrodeposition as ed
import infrared as ir
import cyclovoltammetry as cv

import sem_scale_bar as sem
import tem_scale_bar as tem

class User_Interface :


    def __init__(self, gui_program_dictionary) :
        """ initiate User_Interface class object with the following attributes:
            - self.gui_program_dictionary
                dict: adds an Analysis Tool class object (e.g. from electrodeposition.py Electrodeposition_Analysis) as a value and the program_name as key
                (program_name has to be set as an attribute of the imported class object)
            - self.root
                tkinter.Tk: window in which the GUI is displayed
            - self.programs_frame
                tkinter.Frame: contains all widgets necassary to switch between the various Analysis tools
            - self.selected_program_label
                tkinter.Label: displays the current selected program
            - self.program_variable
                tkinter.StringVar: string variable , which keeps track of which program is selected in self.progam_menu
            - self.program_menu
                tkinter.OptionMenu: dropdown Menu with all imported Analysis tools in this program
            - self.active_program_frame
                tkinter.Frame: is returned by a Analysis tool class object via the function toolobject.get_gui_frame (e.g. Electrodeposition_Analysis.get_gui_frame)

            expected argument datatyp:
            - gui_program_dictionary : dict
        """

        """ set imported dictionary as an attribute of the User Interface class object
        """
        self.gui_program_dictionary = gui_program_dictionary

        """ create a window and add a title to the window
        """
        
        self.root = tk.Tk()
        self.root.title("Colloidal Systems Bayreuth Analysis Tool")

        """ create a tkinter.Label acting as a simple title in the GUI
        """

        label = tk.Label(master = self.root, text = "Colloidal Systems Bayreuth\nAnalysis Tool", font = ("Arial", 20))
        label.grid(column =  0, row = 0, padx = 5, pady = 5)

        """ create a tkinter.frame, which contains all the widgets necessary to switch between the different imported Analysis tools
        """

        self.programs_frame = tk.Frame(master = self.root, relief = "groove", borderwidth = 2)
        self.programs_frame.grid(column = 0, row = 1, padx = 5, pady = 5)


        """ create a tkinter.Label, which contains the currently selected Analysis Tool 
        """
        self.selected_program_label = tk.Label(master = self.programs_frame, text = "Please select a evaluation method", font = "Arial")
        self.selected_program_label.grid(column = 0, row = 0, padx = 5, pady = 5)

        """ create a tkinter.StringVar, which keeps track of the currently selected programm in the dropdown menu self.program_menu

            create a tkinter.OptionMenu, where the User can switch between each imported Analysis Tool
            the respective string variable is self.program_variable
            the displayed texts in the dropdown menu is generated by a list of the keys in the self.gui_program_dictionary (toolobject.program_name)
        """
        self.program_variable = tk.StringVar(self.programs_frame)
        self.program_variable.set("Methods")

        self.program_menu = tk.OptionMenu(self.programs_frame, self.program_variable, *list(self.gui_program_dictionary.keys()))
        self.program_menu.grid(column = 0, row = 1, padx = 5, pady = 5)

        """ create a tkinter.Frame in which the returned tkinter.Frame from the toolobject.get_gui_frame is set
        """
        self.active_program_frame = tk.Frame(master = self.root, relief = "groove", borderwidth = 2)
        self.active_program_frame.grid(row = 1, column = 1, padx = 5, pady = 5)

        """ create a tkinter.Button, which can access the function self.select_program
            after button event the selected program in self.program_menu is selected and displayed in the GUI
        """

        run_program_button = tk.Button(self.programs_frame, text = "Select Method", command = self.select_programm)
        run_program_button.grid(column = 0, row = 2, padx = 5, pady = 5)


    def select_programm(self) :
        """ gets the selected program in the self.program_menu
            function is executed after tkinter.Button event (see function self.__init__)

            get current string variable value from self.program_variable
            selected program is displayed in the gui by getting a GUI frame from the selected toolobject (toolobject.get_gui_frame)

            if no program was selected (displayed text "Methods") an Error Feedback is given back in the self.selected_program_label
        """
        self.active_program_frame.grid_forget()
        selected_programm = self.program_variable.get()

        if selected_programm != "Methods" :
            self.selected_program_label.config(text = f"Selection: {selected_programm}" )
            self.active_program_frame = self.gui_program_dictionary[selected_programm].get_gui_frame(self.root)
            
        else :
            self.selected_program_label.config(text = "Please select a evaluation method", borderwidth = 2, relief = "solid", font = "Arial")


def get_gui_dictionary(program_list) :
    """ returns a dict with the Analysis class object (toolobject) as a value and the toolobject.program_name as key

        loop through all toolobjects in the program_list
    """
    gui_program_dictionary = {}

    for method in program_list :
        gui_program_dictionary[method.program_name] = method

    return gui_program_dictionary


if __name__ == "__main__" :
    """ create a list, which is filled with available analysis toolobjects for the gui_program_dictionaries (are created later to the dictionary)
    
    the program names have to be set in the classes of the evalution methods (toolobject.program_name)
    the program names can be accessed by creating a object of the evalution method and adding the string from class.program_name 
    (e.g. Levich_Analysis.program_name) to the gui_program_list by the function add_method_to_program_dictionary() 
    alternative create an instance of the class and add the class to the list in the "create gui_program_list" loop
    """


    """ addd analysis methods to list
    """
    program_list = [ \
                    la.Levich_Analysis(), # adds Levich and Koutecky-Levich Analysis
                    ta.Tafel_Analysis(), # adds Tafel Analysis
                    ed.Electrodeposition_Analysis(), # adds Electrodeposition Analysis
                    ir.Infrared_Analysis(), # adds Infrared Analysis
                    cv.Cyclovoltammetry_Analysis(), # adds Cyclovoltammetry Analysis
                    sem.SEM_Image_Tool(), # adds SEM Image Scale Bar Tool
                    tem.TEM_Image_Tool() # adds TEM Image Scale Bar Tool
                    ]

    """ create the gui_program_dictionary and import it into the GUI
    """
    gui_program_dictionary = get_gui_dictionary(program_list) 

    gui = User_Interface(gui_program_dictionary) 
    
    gui.root.mainloop()


""" made by Stitler (Pascal Reiß)
"""